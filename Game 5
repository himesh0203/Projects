import pygame
import random

# Initialize Pygame
pygame.init()

# Screen dimensions
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Catch the Falling Square")

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)

# Player properties
player_width = 100
player_height = 20
player_x = (SCREEN_WIDTH - player_width) // 2
player_y = SCREEN_HEIGHT - player_height - 10
player_speed = 5

# Falling object properties
object_radius = 15
object_speed = 3
falling_objects = []

# Score
score = 0
font = pygame.font.Font(None, 36)

# Game loop
running = True
clock = pygame.time.Clock()

while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Player movement
    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT] and player_x > 0:
        player_x -= player_speed
    if keys[pygame.K_RIGHT] and player_x < SCREEN_WIDTH - player_width:
        player_x += player_speed

    # Add new falling objects
    if random.randint(1, 100) == 1:  # Adjust frequency as needed
        object_x = random.randint(object_radius, SCREEN_WIDTH - object_radius)
        object_y = -object_radius
        falling_objects.append([object_x, object_y])

    # Update falling objects
    for obj in falling_objects:
        obj[1] += object_speed
        # Check for collision with player
        if (player_x < obj[0] < player_x + player_width and
                player_y < obj[1] + object_radius < player_y + player_height):
            falling_objects.remove(obj)
            score += 1
        # Remove if off-screen
        elif obj[1] > SCREEN_HEIGHT + object_radius:
            falling_objects.remove(obj)
            score -= 1 # Penalize for missed objects

    # Drawing
    screen.fill(BLACK)  # Background
    pygame.draw.rect(screen, BLUE, (player_x, player_y, player_width, player_height))  # Player
    for obj in falling_objects:
        pygame.draw.circle(screen, RED, (obj[0], obj[1]), object_radius)  # Falling object

    # Display score
    score_text = font.render(f"Score: {score}", True, WHITE)
    screen.blit(score_text, (10, 10))

    pygame.display.flip()  # Update the display
    clock.tick(60)  # Limit frame rate

pygame.quit()
