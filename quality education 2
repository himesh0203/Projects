import statistics
import matplotlib.pyplot as plt

# -------------------- STUDENT CLASS --------------------
class Student:
    def __init__(self, student_id, name):
        self.student_id = student_id
        self.name = name
        self.grades = {}  # {subject: [scores]}

    def add_grade(self, subject, score):
        if subject not in self.grades:
            self.grades[subject] = []
        self.grades[subject].append(score)

    def average_grade(self):
        all_scores = [s for scores in self.grades.values() for s in scores]
        return round(statistics.mean(all_scores), 2) if all_scores else 0

    def subject_averages(self):
        return {subj: round(statistics.mean(scores), 2) for subj, scores in self.grades.items()}

    def needs_support(self, threshold=60):
        return self.average_grade() < threshold

    def weak_subjects(self, threshold=65):
        """Identify subjects where average < threshold"""
        return [subj for subj, avg in self.subject_averages().items() if avg < threshold]

    def __repr__(self):
        return f"{self.name} (ID: {self.student_id}) - Avg: {self.average_grade()}%"

# -------------------- EDUCATION SYSTEM --------------------
class EducationSystem:
    def __init__(self):
        self.students = []

    def add_student(self, student):
        self.students.append(student)

    def record_grade(self, student_id, subject, score):
        for student in self.students:
            if student.student_id == student_id:
                student.add_grade(subject, score)
                return
        print(f"❌ Student with ID {student_id} not found.")

    def class_average(self):
        if not self.students:
            return 0
        return round(statistics.mean([s.average_grade() for s in self.students]), 2)

    def generate_tutoring_recommendations(self, student):
        """Generate personalized learning advice for weak subjects"""
        advice_library = {
            "Math": [
                "Practice daily problem-solving on Khan Academy.",
                "Focus on algebra and geometry basics.",
                "Review missed homework and reattempt wrong problems."
            ],
            "Science": [
                "Watch educational videos on practical experiments.",
                "Focus on understanding concepts, not just memorizing.",
                "Join a science club or do simple home experiments."
            ],
            "English": [
                "Read a short story daily to improve comprehension.",
                "Practice writing summaries and essays.",
                "Use vocabulary apps to learn new words."
            ],
            "History": [
                "Create timeline charts to visualize events.",
                "Review key historical figures and causes of events.",
                "Watch documentaries for better understanding."
            ]
        }

        weak_subjects = student.weak_subjects()
        if not weak_subjects:
            return ["Excellent progress! Keep up your good work 👏"]

        suggestions = []
        for subject in weak_subjects:
            if subject in advice_library:
                suggestions.extend([f"{subject}: {tip}" for tip in advice_library[subject]])
            else:
                suggestions.append(f"{subject}: Review notes and practice regularly.")
        return suggestions

    def show_report(self):
        print("\n📊 Student Performance Report")
        for student in self.students:
            print(student)
            for subject, scores in student.grades.items():
                avg = round(statistics.mean(scores), 2)
                print(f"   • {subject}: {scores} (avg: {avg}%)")

            print("\n🎯 Tutoring Recommendations:")
            for tip in self.generate_tutoring_recommendations(student):
                print(f"   - {tip}")
            print("-" * 50)

        print(f"\n🏫 Class Average: {self.class_average()}%")

    def visualize_performance(self):
        names = [s.name for s in self.students]
        averages = [s.average_grade() for s in self.students]

        plt.figure(figsize=(8, 5))
        bars = plt.bar(names, averages, color=['green' if avg >= 60 else 'red' for avg in averages])
        plt.title("Student Performance Overview")
        plt.xlabel("Students")
        plt.ylabel("Average Grade (%)")
        plt.ylim(0, 100)
        plt.grid(axis='y', linestyle='--', alpha=0.6)

        for bar, avg in zip(bars, averages):
            plt.text(bar.get_x() + bar.get_width()/2, bar.get_height()-5, f"{avg}%", 
                     ha='center', color='white', fontweight='bold')

        plt.show()

# -------------------- MAIN PROGRAM --------------------
def main():
    system = EducationSystem()

    # Add students
    system.add_student(Student(1, "Alice"))
    system.add_student(Student(2, "Bob"))
    system.add_student(Student(3, "Catherine"))
    system.add_student(Student(4, "David"))

    # Record grades (sample data)
    data = {
        1: {"Math": [80, 85, 90], "Science": [70, 75], "English": [88, 92]},
        2: {"Math": [45, 55, 50], "Science": [58, 62], "English": [65, 60]},
        3: {"Math": [95, 90], "Science": [92, 89], "English": [88, 91]},
        4: {"Math": [65, 68], "Science": [72, 70], "History": [55, 60]},
    }

    for sid, subjects in data.items():
        for subject, scores in subjects.items():
            for score in scores:
                system.record_grade(sid, subject, score)

    # Generate reports & visualization
    system.show_report()
    system.visualize_performance()

if __name__ == "__main__":
    main()
