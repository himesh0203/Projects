pip install streamlit pandas matplotlib

streamlit run democratizing_technology_dashboard.py

import streamlit as st
import pandas as pd
import random
import matplotlib.pyplot as plt

# -------------------- COMMUNITY CLASS --------------------
class Community:
    def __init__(self, name, population, access_level):
        self.name = name
        self.population = population
        self.access_level = access_level  # 0=No Access, 1=Limited, 2=Moderate, 3=Full
        self.adopted_technology = []

    def adopt_technology(self, tech, adoption_rate):
        if self.access_level == 0:
            adoption = 0
        else:
            adoption = int(self.population * adoption_rate * (self.access_level / 3))
        self.adopted_technology.append((tech, adoption))
        return adoption

# -------------------- TECHNOLOGY CLASS --------------------
class Technology:
    def __init__(self, name, complexity, cost):
        self.name = name
        self.complexity = complexity  # 1=Easy, 2=Medium, 3=Hard
        self.cost = cost  # Average cost per person

# -------------------- TECHNOLOGY ACCESS SYSTEM --------------------
class TechnologyAccessSystem:
    def __init__(self):
        self.communities = []
        self.technologies = []

    def add_community(self, community: Community):
        self.communities.append(community)

    def add_technology(self, tech: Technology):
        self.technologies.append(tech)

    def simulate_adoption(self):
        report = []
        for community in self.communities:
            for tech in self.technologies:
                adoption_rate = random.uniform(0.3, 0.9) * (1 / tech.complexity) * (1 / (tech.cost / 100 + 1))
                adopted = community.adopt_technology(tech.name, adoption_rate)
                report.append({
                    "Community": community.name,
                    "Technology": tech.name,
                    "Population": community.population,
                    "Adopted": adopted,
                    "Access Level": community.access_level
                })
        return pd.DataFrame(report)

    def high_barrier_communities(self):
        return [c.name for c in self.communities if c.access_level < 2]

# -------------------- STREAMLIT DASHBOARD --------------------
st.set_page_config(page_title="🌐 Democratizing Technology", layout="wide")
st.title("🌐 Democratizing Technology Dashboard")
st.markdown("Simulate technology adoption across communities and identify access barriers.")

# Sidebar Controls
st.sidebar.header("Simulation Settings")
num_communities = st.sidebar.slider("Number of Communities", 2, 8, 4)
num_technologies = st.sidebar.slider("Number of Technologies", 2, 6, 4)

# Predefined communities and technologies
community_names = ["Urban Center", "Rural Area", "Suburban Area", "Remote Village", "Township", "Market Area", "Coastal Area", "Industrial Zone"]
technology_names = ["Smartphone", "Solar Panels", "Internet Access", "AI Education Platform", "E-Health Platform", "Renewable Energy Kits"]

# Initialize system
system = TechnologyAccessSystem()

# Add communities
for i in range(num_communities):
    access_level = random.choice([0,1,2,3])
    population = random.randint(500, 5000)
    system.add_community(Community(community_names[i], population, access_level))

# Add technologies
for i in range(num_technologies):
    complexity = random.randint(1,3)
    cost = random.randint(100,1000)
    system.add_technology(Technology(technology_names[i], complexity, cost))

# Simulate adoption
adoption_df = system.simulate_adoption()
st.subheader("📊 Technology Adoption Report")
st.dataframe(adoption_df)

# Highlight communities with barriers
barriers = system.high_barrier_communities()
if barriers:
    st.subheader("⚠️ Communities Facing Technology Access Barriers")
    st.warning(", ".join(barriers))
else:
    st.success("✅ All communities have adequate technology access.")

# Visualization: Adoption by Community
st.subheader("📈 Technology Adoption by Community")
adoption_summary = adoption_df.groupby("Community")["Adopted"].sum().reset_index()
fig, ax = plt.subplots(figsize=(8,4))
ax.bar(adoption_summary["Community"], adoption_summary["Adopted"], color='skyblue')
ax.set_ylabel("Number of Adoptions")
ax.set_xlabel("Community")
ax.set_title("Total Technology Adoption per Community")
plt.xticks(rotation=45)
st.pyplot(fig)

# Visualization: Technology Coverage
st.subheader("🔥 Technology Adoption Coverage")
tech_summary = adoption_df.groupby("Technology")["Adopted"].sum().reset_index()
fig2, ax2 = plt.subplots(figsize=(8,4))
ax2.bar(tech_summary["Technology"], tech_summary["Adopted"], color='orange')
ax2.set_ylabel("Number of Adoptions")
ax2.set_xlabel("Technology")
ax2.set_title("Total Adoptions per Technology")
plt.xticks(rotation=45)
st.pyplot(fig2)

# Suggestions
st.subheader("💡 Suggestions to Democratize Technology")
st.info("""
- Subsidize costs and provide **affordable devices**.  
- Launch **digital literacy and education programs**.  
- Expand **infrastructure** like internet and electricity.  
- Partner with **local organizations** to improve adoption.  
- Encourage **open-source technologies** for wider access.
""")
