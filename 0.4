import tkinter as tk
from tkinter import messagebox, ttk, filedialog
import csv

# List to store all ratings
all_ratings = []

# Functions
def submit_ratings():
    try:
        food = int(food_entry.get())
        road = int(road_entry.get())
        education = int(education_entry.get())
        water = int(water_entry.get())
        electricity = int(electricity_entry.get())

        if any(r < 1 or r > 5 for r in [food, road, education, water, electricity]):
            messagebox.showerror("Error", "Please enter ratings between 1 and 5")
            return

        rating = {"Food": food, "Road": road, "Education": education, "Water": water, "Electricity": electricity}
        all_ratings.append(rating)

        tree.insert("", "end", values=(food, road, education, water, electricity))
        update_averages()
        clear_entries()

    except ValueError:
        messagebox.showerror("Error", "Please enter valid numbers")

def update_averages():
    if not all_ratings:
        avg_label.config(text="No ratings submitted yet")
        return

    averages = {key: sum(r[key] for r in all_ratings)/len(all_ratings) for key in all_ratings[0]}
    avg_label.config(text="\n".join(f"{k} Average: {v:.2f}" for k, v in averages.items()))

def clear_entries():
    food_entry.delete(0, tk.END)
    road_entry.delete(0, tk.END)
    education_entry.delete(0, tk.END)
    water_entry.delete(0, tk.END)
    electricity_entry.delete(0, tk.END)

def delete_selected():
    selected = tree.selection()
    if not selected:
        messagebox.showwarning("Warning", "No entry selected")
        return
    for sel in selected:
        index = tree.index(sel)
        tree.delete(sel)
        del all_ratings[index]
    update_averages()

def edit_selected():
    selected = tree.selection()
    if len(selected) != 1:
        messagebox.showwarning("Warning", "Select exactly one entry to edit")
        return
    index = tree.index(selected[0])
    rating = all_ratings[index]

    # Fill entries with selected data
    food_entry.delete(0, tk.END)
    food_entry.insert(0, rating["Food"])
    road_entry.delete(0, tk.END)
    road_entry.insert(0, rating["Road"])
    education_entry.delete(0, tk.END)
    education_entry.insert(0, rating["Education"])
    water_entry.delete(0, tk.END)
    water_entry.insert(0, rating["Water"])
    electricity_entry.delete(0, tk.END)
    electricity_entry.insert(0, rating["Electricity"])

    # Delete old entry
    tree.delete(selected[0])
    del all_ratings[index]
    update_averages()

def export_csv():
    if not all_ratings:
        messagebox.showwarning("Warning", "No data to export")
        return
    file_path = filedialog.asksaveasfilename(defaultextension=".csv", filetypes=[("CSV files","*.csv")])
    if not file_path:
        return
    with open(file_path, "w", newline="") as f:
        writer = csv.DictWriter(f, fieldnames=all_ratings[0].keys())
        writer.writeheader()
        writer.writerows(all_ratings)
    messagebox.showinfo("Success", f"Data exported to {file_path}")

# GUI
root = tk.Tk()
root.title("Interactive Community Ratings App")
root.geometry("650x550")

# Input frame
input_frame = tk.Frame(root)
input_frame.pack(pady=10)

tk.Label(input_frame, text="Rate the following services (1-5):", font=("Arial", 14)).grid(row=0, column=0, columnspan=2, pady=5)

tk.Label(input_frame, text="Food Quality:").grid(row=1, column=0, sticky="e")
food_entry = tk.Entry(input_frame)
food_entry.grid(row=1, column=1)

tk.Label(input_frame, text="Road Quality:").grid(row=2, column=0, sticky="e")
road_entry = tk.Entry(input_frame)
road_entry.grid(row=2, column=1)

tk.Label(input_frame, text="Education Quality:").grid(row=3, column=0, sticky="e")
education_entry = tk.Entry(input_frame)
education_entry.grid(row=3, column=1)

tk.Label(input_frame, text="Water Quality:").grid(row=4, column=0, sticky="e")
water_entry = tk.Entry(input_frame)
water_entry.grid(row=4, column=1)

tk.Label(input_frame, text="Electricity Availability:").grid(row=5, column=0, sticky="e")
electricity_entry = tk.Entry(input_frame)
electricity_entry.grid(row=5, column=1)

tk.Button(input_frame, text="Submit Ratings", command=submit_ratings).grid(row=6, column=0, columnspan=2, pady=10)

# Table frame
table_frame = tk.Frame(root)
table_frame.pack(pady=10)

columns = ("Food", "Road", "Education", "Water", "Electricity")
tree = ttk.Treeview(table_frame, columns=columns, show="headings", height=8)
for col in columns:
    tree.heading(col, text=col)
    tree.column(col, width=100, anchor="center")
tree.pack()

# Buttons for edit/delete/export
action_frame = tk.Frame(root)
action_frame.pack(pady=10)

tk.Button(action_frame, text="Edit Selected", command=edit_selected).grid(row=0, column=0, padx=5)
tk.Button(action_frame, text="Delete Selected", command=delete_selected).grid(row=0, column=1, padx=5)
tk.Button(action_frame, text="Export to CSV", command=export_csv).grid(row=0, column=2, padx=5)

# Average ratings
avg_label = tk.Label(root, text="Averages will appear here", font=("Arial", 12), justify="left")
avg_label.pack(pady=10)

root.mainloop()
