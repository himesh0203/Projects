pip install streamlit pandas

streamlit run unread_messages_dashboard.py

import streamlit as st
import pandas as pd
import random

# -------------------- MESSAGE CLASS --------------------
class Message:
    def __init__(self, sender, subject, priority):
        self.sender = sender
        self.subject = subject
        self.priority = priority  # High, Medium, Low
        self.read = False

    def mark_read(self):
        self.read = True

# -------------------- USER CLASS --------------------
class User:
    def __init__(self, name):
        self.name = name
        self.inbox = []

    def receive_message(self, message: Message):
        self.inbox.append(message)

    def unread_messages(self):
        return [msg for msg in self.inbox if not msg.read]

    def summary(self):
        unread = self.unread_messages()
        high = len([m for m in unread if m.priority == "High"])
        medium = len([m for m in unread if m.priority == "Medium"])
        low = len([m for m in unread if m.priority == "Low"])
        return {"Total Unread": len(unread), "High": high, "Medium": medium, "Low": low}

# -------------------- STREAMLIT DASHBOARD --------------------
st.set_page_config(page_title="ðŸ“¨ Unread Messages Dashboard", layout="wide")
st.title("ðŸ“¨ Unread Messages Overload Manager")
st.markdown("Simulate and manage unread messages with priority indicators.")

# Sidebar: User and Settings
st.sidebar.header("User Settings")
user_name = st.sidebar.text_input("User Name", "Alice")
num_messages = st.sidebar.slider("Number of Messages to Simulate", 5, 50, 20)

# Initialize User
user = User(user_name)

# Simulate receiving messages
senders = ["Bob", "Charlie", "Diana", "Eve", "Frank"]
subjects = ["Meeting", "Project Update", "Invoice", "Reminder", "Newsletter", "Alert"]
priorities = ["High", "Medium", "Low"]

for _ in range(num_messages):
    sender = random.choice(senders)
    subject = random.choice(subjects)
    priority = random.choices(priorities, weights=[0.2, 0.5, 0.3])[0]  # High less frequent
    msg = Message(sender, subject, priority)
    user.receive_message(msg)

# Summary Display
st.subheader("ðŸ“Š Unread Messages Summary")
summary = user.summary()
st.metric("Total Unread", summary["Total Unread"])
st.metric("High Priority", summary["High"])
st.metric("Medium Priority", summary["Medium"])
st.metric("Low Priority", summary["Low"])

# Display Messages in a Table
st.subheader("ðŸ“‹ Inbox")
message_data = []
for i, msg in enumerate(user.unread_messages()):
    message_data.append({
        "Index": i,
        "Sender": msg.sender,
        "Subject": msg.subject,
        "Priority": msg.priority,
        "Read": msg.read
    })

df = pd.DataFrame(message_data)

# Color coding for priority
def highlight_priority(row):
    color = ""
    if row.Priority == "High":
        color = "background-color: #ff9999"  # Red
    elif row.Priority == "Medium":
        color = "background-color: #fff79a"  # Yellow
    else:
        color = "background-color: #b3ffb3"  # Green
    return [color]*len(row)

st.dataframe(df.style.apply(highlight_priority, axis=1))

# Interactive: Mark messages as read
st.subheader("âœ… Mark Messages as Read")
indices_to_mark = st.multiselect("Select message indices to mark as read", df["Index"].tolist())

if st.button("Mark Selected as Read"):
    for idx in indices_to_mark:
        user.unread_messages()[idx].mark_read()
    st.success(f"Marked {len(indices_to_mark)} message(s) as read.")
    st.experimental_rerun()  # Refresh the dashboard

# Suggestions
st.subheader("ðŸ’¡ Tips to Manage Message Overload")
st.info("""
- Prioritize **High priority messages** first.  
- Set up **folders or labels** for organization.  
- Limit checking messages **at specific times** to avoid constant interruptions.  
- Use **automatic filters** to separate low-priority messages.  
""")
